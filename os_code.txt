/* Code-1*/

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>

sem_t pen, paper, ques_paper;
sem_t student_sem[3];
sem_t teacher_sem;
int total_assign = 0;

void *student(void *arg) {
    int student_id = *(int *)arg;

    sem_wait(&teacher_sem);

    if (student_id == 1) {
        printf("Student 1 is waiting for pen and paper.\n");
        sem_wait(&pen);
        sem_wait(&paper);
    } else if (student_id == 2) {
        printf("Student 2 is waiting for paper and question paper.\n");
        sem_wait(&paper);
        sem_wait(&ques_paper);
    } else {
        printf("Student 3 is waiting for pen and question paper.\n");
        sem_wait(&pen);
        sem_wait(&ques_paper);
    }

    printf("Student %d has completed the assignment.\n", student_id);
    total_assign++;

    sem_post(&teacher_sem);

    sem_post(&pen);
    sem_post(&paper);
    sem_post(&ques_paper);

    pthread_exit(NULL);
}

void *teacher(void *arg) {
    while (total_assign < 15) {
        int item1 = rand() % 3;
        int item2;
        do {
            item2 = rand() % 3;
        } while (item1 == item2);

        if (item1 == 0 && item2 == 1) {
            sem_post(&pen);
            sem_post(&paper);
        } else if (item1 == 1 && item2 == 0) {
            sem_post(&pen);
            sem_post(&paper);
        } else if (item1 == 1 && item2 == 2) {
            sem_post(&paper);
            sem_post(&ques_paper);
        } else {
            sem_post(&ques_paper);
            sem_post(&pen);
        }

        sem_wait(&teacher_sem);
        sem_post(&teacher_sem);
    }
}

int main() {
    pthread_t students[3];
    pthread_t teacher_thread;

    int student_ids[3] = {1, 2, 3};  
    int i;

    sem_init(&pen, 0, 1);
    sem_init(&paper, 0, 1);
    sem_init(&ques_paper, 0, 1);
    sem_init(&teacher_sem, 0, 1);

    for (i = 0; i < 3; i++) {
        sem_init(&student_sem[i], 0, 0);
    }

    for (i = 0; i < 3; i++) {
        pthread_create(&students[i], NULL, student, &student_ids[i]);
    }

    pthread_create(&teacher_thread, NULL, teacher, NULL);

    for (i = 0; i < 3; i++) {
        pthread_join(students[i], NULL);
    }

    pthread_cancel(teacher_thread);

    printf("Total assignments completed by students: %d\n", total_assign);

    return 0;
}


/*Code -1*/


/*Code-2*/

#include <stdio.h>
#include <stdlib.h>

void teacher_and_student() {
    
    int p[30], pr[30], bt[30], temp, max, wt[30], ta[30], sum = 0, i, j, n;
    int c = 0, d = 0;
    wt[0] = 0;
    printf("Enter the number of persons=");
    scanf("%d", &n);
    printf("Enter 0 for teacher and 1 for student\n");
    for (i = 0; i < n; i++) {
        p[i] = i + 1;
        bt[i] = 1;
        printf("Who arrived %d? =", i + 1);
        scanf("%d", &pr[i]);
    }
    for (i = 0; i < n; i++) {
        max = i;
        for (j = i + 1; j < n; j++) {
            if (pr[j] < pr[max])
                max = j;
        }
        temp = pr[max];
        pr[max] = pr[i];
        pr[i] = temp;
        temp = bt[max];
        bt[max] = bt[i];
        bt[i] = temp;
        temp = p[max];
        p[max] = p[i];
        p[i] = temp;
    }
    for (i = 0; i < n; i++) {
        wt[i + 1] = bt[i] + wt[i];
        ta[i] = bt[i] + wt[i];
        sum += ta[i];
    }
    for (i = 0; i < n; i++) {
        printf("\nWaiting time for person %d is = %d", p[i], wt[i]);
    }
    printf("\n\n Student and teacher issue completed");

}

void teacher_and_teacher() {
    
    int p[30], pr[30], bt[30], temp, max, wt[30], ta[30], sum = 0, i, j, n;
    int c = 0, d = 0;
    wt[0] = 0;
    printf("Enter the number of persons=");
    scanf("%d", &n);
    printf("Enter 0 for teacher and 1 for student\n");
    for (i = 0; i < n; i++) {
        p[i] = i + 1;
        bt[i] = 1;
        printf("Who arrived %d? =", i + 1);
        scanf("%d", &pr[i]);
        if (pr[i] == 0) {
            c = c + 1;
        }
        if (pr[i] == 0 && d == 1) {
            pr[i] = pr[i] + 1;
            d = 0;
        }
        if (c == 3) {
            c = 0;
            d = 1;
        }
    }
    for (i = 0; i < n; i++) {
        max = i;
        for (j = i + 1; j < n; j++) {
            if (pr[j] < pr[max])
                max = j;
        }
        temp = pr[max];
        pr[max] = pr[i];
        pr[i] = temp;
        temp = bt[max];
        bt[max] = bt[i];
        bt[i] = temp;
        temp = p[max];
        p[max] = p[i];
        p[i] = temp;
    }
    for (i = 0; i < n; i++) {
        wt[i + 1] = bt[i] + wt[i];
        ta[i] = bt[i] + wt[i];
        sum += ta[i];
    }
    for (i = 0; i < n; i++) {
        printf("\nWaiting time for person %d is = %d", p[i], wt[i]);
    }
    printf("\n\n Teacher and teacher issue completed\n");

}

int main() {
    int cases;
    printf("Enter the case 1 or 2: ");
    scanf("%d", &cases);

    switch (cases) {
        case 1:
            teacher_and_student();
            break;
        case 2:
            teacher_and_teacher();
            break;
        default:
            printf("Wrong Cases_number");
            exit(0);
    }

    return 0;
}



/*Code -2*/
